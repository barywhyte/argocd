version: 2.1
commands: # a reusable command with parameters
  script:
    description: 'Downloads and install tools'
    parameters:
      environment:
        type: 'enum'
        default: 'dev'
        enum: [ 'dev', 'staging', 'prod', 'data-platform-dev' ]
    steps:
      - checkout
      - run: |
          apk add --update git bash openssh  coreutils jq ruby ruby-json zip curl --no-cache python3 py3-pip \
          && pip3 install --upgrade pip \
          && pip3 install awscli
      - run: |
          target=<<parameters.environment>>
          if [ $target == 'prod' ]; then
            cd terraform/env-prod
            mkdir .keys/
            echo $GCP_ACCOUNT_PROD > .keys/gcp_account.json
            export AWS_PROFILE=prod
            AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_PROD}
            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_PROD}
            echo -e "api_key =  \x22$DATADOG_API_KEY\x22" > terraform.tfvars
            echo -e "app_key =  \x22$DATADOG_APP_KEY\x22" >> terraform.tfvars
            aws configure --profile ${AWS_PROFILE} set aws_access_key_id ${AWS_ACCESS_KEY_ID}
            aws configure --profile ${AWS_PROFILE} set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
            export GOOGLE_APPLICATION_CREDENTIALS=.keys/gcp_account.json && terraform init -input=false -backend=true && (terraform validate -json=false && echo "√ passed\n") && \
            sh ../drift.sh

          elif [ $target == 'staging' ]; then
            cd terraform/env-staging
            mkdir .keys/
            echo $GCP_ACCOUNT_STAGING > .keys/gcp_account.json
            export AWS_PROFILE=staging
            AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_STAGING}
            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_STAGING}
            echo -e "api_key =  \x22$DATADOG_API_KEY\x22" > terraform.tfvars
            echo -e "app_key =  \x22$DATADOG_APP_KEY\x22" >> terraform.tfvars
            aws configure --profile ${AWS_PROFILE} set aws_access_key_id ${AWS_ACCESS_KEY_ID}
            aws configure --profile ${AWS_PROFILE} set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
            export GOOGLE_APPLICATION_CREDENTIALS=.keys/gcp_account.json && terraform init -input=false -backend=true && (terraform validate -json=false && echo "√ passed\n") && \
            sh ../drift.sh

          elif [ $target == 'dev' ]; then
            cd terraform/env-dev
            mkdir .keys/
            echo $GCP_ACCOUNT > .keys/gcp_account.json
            export AWS_PROFILE=dev
            AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_DEV}
            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_DEV}
            echo -e "api_key =  \x22$DATADOG_API_KEY\x22" > terraform.tfvars
            echo -e "app_key =  \x22$DATADOG_APP_KEY\x22" >> terraform.tfvars
            aws configure --profile ${AWS_PROFILE} set aws_access_key_id ${AWS_ACCESS_KEY_ID}
            aws configure --profile ${AWS_PROFILE} set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
            export GOOGLE_APPLICATION_CREDENTIALS=.keys/gcp_account.json && terraform init -input=false -backend=true && (terraform validate -json=false && echo "√ passed\n") && \
            sh ../drift.sh
            mkdir -p /tmp/dir
            terraform show -json tf.plan > /tmp/dir/tf_plan_json.json

          else
            cd terraform/env-data-platform/dev
            mkdir .keys/
            echo $GCP_ACCOUNT > .keys/gcp_account.json
            export AWS_PROFILE=dev
            AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_DEV}
            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_DEV}
            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_DEV}
            DATABRICKS_USERNAME=${DATABRICKS_USERNAME}
            export TF_VAR_datadog_api_key=${DATADOG_API_KEY}
            aws configure --profile ${AWS_PROFILE} set aws_access_key_id ${AWS_ACCESS_KEY_ID}
            aws configure --profile ${AWS_PROFILE} set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
            export GOOGLE_APPLICATION_CREDENTIALS=.keys/gcp_account.json && terraform init -input=false -backend=true && (terraform validate -json=false && echo "√ passed\n") && \
            sh ../drift.sh terraform_plan

          fi

orbs:
  slack: circleci/slack@4.9.4
  terraform-config-validator: di-graph/terraform-config-validator@1.0.2

jobs:
  mdl:
    docker:
      - image: rsrchboy/mdl
    steps:
      - checkout
      - run:
          name: Validate Markdown
          command: |
            mdl -r MD001,MD002,MD003,MD004,MD005,MD006,MD007,MD008,MD009,MD010,MD011,MD012,MD014,MD015.MD016,MD017,MD018,MD019,MD020,MD021,MD022,MD023,MD024,MD025,MD027,MD028,MD029,MD030,MD031,MD032,MD033,MD034,MD035,MD036,MD037,MD038,MD039,MD040,MD041,MD042,MD043,MD044,MD045 $(find . -type f -name '*.md')

  shellcheck:
    docker:
      - image: koalaman/shellcheck-alpine
    steps:
      - checkout
      - run: .circleci/bin/shellcheck.sh

  terraform-fmt:
    docker:
      - image: hashicorp/terraform:1.2.8

    steps:
      - checkout
      - run:
          name: Check Terraform formatting
          command: |
            if [[ -n "$(terraform fmt -recursive -write=false)" ]]; then echo "Need to run 'terraform fmt -recursive' to fix formatting"; exit 1; fi


  data-platform-dev-plan:
    docker:
      - image: hashicorp/terraform:1.2.8
    steps:
      - script:
          environment: data-platform-dev

  terraform-dev:
    docker:
       - image: hashicorp/terraform:1.2.8

    steps:
      - script:
          environment: dev

  terraform-staging:
    docker:
       - image: hashicorp/terraform:1.2.8

    steps:
      - script:
          environment: staging

  terraform-prod:
    docker:
     - image: hashicorp/terraform:1.2.8

    steps:
      - script:
          environment: prod


workflows:
  version: 2
  scheduled-workflow:
    triggers:
     - schedule:
          cron: "0 4 * * *"
          filters:
           branches:
             only:
              - master

    jobs:
      - terraform-dev
      - terraform-staging
      - terraform-prod
      - data-platform-dev-plan

  not-scheduled:
    jobs:
      - mdl
      - shellcheck
      - terraform-fmt
      - terraform

